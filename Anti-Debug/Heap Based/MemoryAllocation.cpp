#include <iostream>
#include <Windows.h>

typedef PVOID(NTAPI* RtlCreateHeapPtr)(ULONG, PVOID, ULONG, ULONG, PVOID, PVOID);
typedef PVOID(NTAPI* RtlAllocateHeap)(PVOID, ULONG, SIZE_T);
typedef PVOID(NTAPI* RtlFreeHeap)(PVOID, ULONG, PVOID);

int main() {
    HMODULE hNtdll = LoadLibrary(L"ntdll.dll");
    if (hNtdll == nullptr) {
        std::cerr << "Failed to load ntdll.dll!" << std::endl;
        return 1;
    }

    RtlCreateHeapPtr pRtlCreateHeap = reinterpret_cast<RtlCreateHeapPtr>(GetProcAddress(hNtdll, "RtlCreateHeap"));
    if (pRtlCreateHeap == nullptr) {
        std::cerr << "Failed to get address of RtlCreateHeap function!" << std::endl;
        FreeLibrary(hNtdll);
        return 1;
    }

    void* hHeap = pRtlCreateHeap(0x41002, nullptr, 0, 0, nullptr, nullptr);
    if (hHeap == nullptr) {
        std::cerr << "Failed to create heap!" << std::endl;
        FreeLibrary(hNtdll);
        return 1;
    }

    RtlAllocateHeap pRtlAllocateHeap= reinterpret_cast<RtlAllocateHeap>(GetProcAddress(hNtdll, "RtlAllocateHeap"));

    void* buffer = pRtlAllocateHeap(hHeap, HEAP_GENERATE_EXCEPTIONS, 0x10);
    if (buffer == nullptr) {
        std::cerr << "Failed to create heap!" << std::endl;
        FreeLibrary(hNtdll);
        return 1;
    }

    unsigned char* pOutput = (unsigned char*)buffer;

    for (int i = 0; i < 0x20; i++) {

        printf("%02X ", pOutput[i]);
        if ((i + 1) % 16 == 0) {
            printf("\r\n");
        }
    }

    
    RtlFreeHeap pRtlFreeHeap = reinterpret_cast<RtlFreeHeap>(GetProcAddress(hNtdll, "RtlFreeHeap"));

    pRtlFreeHeap(hHeap, HEAP_NO_SERIALIZE, buffer);
   
    if (!HeapDestroy(hHeap)) {
        std::cerr << "Failed to destroy heap!" << std::endl;
        FreeLibrary(hNtdll);
        return 1;
    }

    FreeLibrary(hNtdll);

    system("pause");

    return 0;
}
